---
apiVersion: v1
kind: Namespace
metadata:
  name: kitchensink-infra 
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: guide-setup-job
  namespace: kitchensink-infra
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: guide-setup
rules:
- apiGroups:
  - ''
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - image.openshift.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - route.openshift.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apps.openshift.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - monitoring.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - operator.tekton.dev
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: guide-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: guide-setup
subjects:
- kind: ServiceAccount
  name: guide-setup-job
  namespace: kitchensink-infra
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: guide-setup-self-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: self-provisioner
subjects:
- kind: ServiceAccount
  name: guide-setup-job
  namespace: kitchensink-infra
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: guide-setup-files
  namespace: kitchensink-infra
data:
  limit-range.yaml: |
    kind: LimitRange
    apiVersion: v1
    metadata:
      name: guide-resource-limits
    spec:
      limits:
        - type: Container
          max:
            cpu: '500m'
            memory: 512Mi
          default:
            cpu: 100m
            memory: 150Mi
          defaultRequest:
            cpu: 100m
            memory: 150Mi
        - type: Pod
          max:
            cpu: '750m'
            memory: 600Mi
  resource-quota.yaml: |
    kind: ResourceQuota
    apiVersion: v1
    metadata:
      name: guide-resource-quota
    spec:
      hard:
        count/deployments.apps: '2'
        # limits.cpu: 1200m
        # limits.memory: 800Mi
        # requests.cpu: 500m
        # requests.memory: 800Mi 
---
apiVersion: batch/v1
kind: Job
metadata:
  namespace: kitchensink-infra
  name: guide-setup
spec:
  backoffLimit: 10
  template:
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: worker
        securityContext:
          capabilities:
            drop:
              - ALL
          allowPrivilegeEscalation: false
        # image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        image: quay.io/atarazana/jq:0.0.3
        env:
        - name: COUNT
          value: "3"
        - name: SLEEP_TIME
          value: "30"
        - name: PROJECT_BASE_LIST
          value: "argo appset-a appset-b kustomize-dev kustomize-test helm helm-kustomize-dev helm-kustomize-test cicd-tekton cicd-jenkins"
        - name: PROJECT_NAME_INFRA
          value: kitchensink-infra
        - name: PROJECT_NAME_QUAY
          value: quay-system
        - name: PASSWORD
          value: openshift
        command:
        - /bin/sh
        - '-c'
        args:
        - |-
          echo "------------------------------"
          echo " Setting Up Guide Resources"

          TEKTON_CONFIG_READY=$(oc get tektonconfig config -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
          if [ "${TEKTON_CONFIG_READY}" == "True" ]; then
              echo "TektonConfig is ready, let's proceed"
              oc get tektonpipeline,tektontrigger,tektonaddon,pac
              echo "Sleeping one minute"
              sleep 60
          else
              echo "TektonConfig is not ready"
              sleep ${SLEEP_TIME}
              exit -1
          fi

          oc new-project ${PROJECT_NAME_INFRA}

          for i in $(seq 1 $COUNT); 
          do
            USERNAME=user${i}
            for j in ${PROJECT_BASE_LIST};
            do
              PROJECT_NAME=${j}-${USERNAME}
              echo ">>> Creating project ${PROJECT_NAME}"
              oc new-project ${PROJECT_NAME}
              oc adm policy add-role-to-user edit ${USERNAME} -n ${PROJECT_NAME}
              oc adm policy add-role-to-user monitoring-edit ${USERNAME} -n ${PROJECT_NAME}
              oc adm policy add-role-to-user alert-routing-edit ${USERNAME} -n ${PROJECT_NAME}
              echo ">>> Deleting limitrange/${PROJECT_NAME}-core-resource-limits"
              oc delete limitrange/${PROJECT_NAME}-core-resource-limits -n ${PROJECT_NAME}
              # echo ">>> Creating limitrange with /setup-files/limit-range.yaml"
              # oc create -n ${PROJECT_NAME} -f /setup-files/limit-range.yaml
              # echo ">>> Creating quota with /setup-files/resource-quota.yaml"
              # oc create -n ${PROJECT_NAME} -f /setup-files/resource-quota.yaml  
            done
            oc adm policy add-role-to-user view ${USERNAME} -n ${PROJECT_NAME_INFRA}
            oc adm policy add-role-to-user view ${USERNAME} -n ${PROJECT_NAME_QUAY}
          done
          echo "------------------------------"
        imagePullPolicy: Always
        volumeMounts:
        - name: guide-setup-files-volume
          mountPath: /setup-files
      restartPolicy: Never
      serviceAccountName: guide-setup-job
      volumes:
      - name: guide-setup-files-volume
        configMap:
          name: guide-setup-files